<?php 

namespace App\Telegram\Bots\pozor_baraholka_bot\Commands\AdminCommands;

use App\Telegram\BotApi;
use App\Telegram\Bots\pozor_baraholka_bot\Models\Announcement;
use App\Telegram\Commands\Command;
use App\Telegram\Entities\Response;
use App\Telegram\Entities\Update;
use App\Telegram\Exceptions\TelegramException;
use App\Telegram\Exceptions\TelegramUserException;

class AnnouncementShow extends Command
{
    public static $command = 'show_announcement';

    public static $title = '';

    protected $enabled = true;

    public function execute(Update $updates): Response
    {
        $announcement = Announcement::findOr($updates->getInlineData()?->getAnnouncementId(), function () {
            throw new TelegramUserException("–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ");
        });

        if ($announcement->status === 'published') {
            throw new TelegramUserException("–û–±—ä—è–≤–ª–µ–Ω–∏–µ —É–∂–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ");
        }

        if ($announcement->status === 'irrelevant') {
            throw new TelegramUserException("–û–±—ä—è–≤–ª–µ–Ω–∏–µ —É–∂–µ –Ω–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ");
        }

        try {
            (count($announcement->photo) > 0)
                ? $this->sendMessageWithMedia($updates, $announcement)
                : $this->sendMessageWithoutMedia($updates, $announcement);
        }
        catch (TelegramException $exception) {
            throw new TelegramUserException("–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {$exception->getMessage()}");
        }
        
        return $this->sendConfirmMessage($updates, $announcement);
    }
    
    private function createAdText($announcement): string
    {
        $text = [];
        
        $text['type'] = $announcement->type === 'buy' ? "#–∫—É–ø–ª—é" : "#–ø—Ä–æ–¥–∞–º";

        // If announcement have a title, add it to the ad text
        if ($announcement->title) {
            $text['title'] = "<b>{$announcement->title}</b>";
        }

        // Add caption to the ad text
        $text['caption'] = $announcement->caption;

        // If notes have a product condition, add it to the ad text
        if ($announcement->condition) {
            $text['condition'] = $announcement->condition === 'new' ? "<i>–°–æ—Å—Ç–æ—è–Ω–∏–µ:</i> –ù–æ–≤–æ–µ" : "<i>–°–æ—Å—Ç–æ—è–Ω–∏–µ:</i> –ë/—É";
        }

        // If notes have a price, add it to the ad text
        if ($announcement->cost) {
            $text['cost'] = "<i>–¶–µ–Ω–∞:</i> {$announcement->cost} CZK";
        }

        $text['contact'] = "<a href='https://t.me/pozor_baraholka_bot?start=announcement={$announcement->id}'>üîó–ö–æ–Ω—Ç–∞–∫—Ç</a>" . " (<i>–ü–µ—Ä–µ–π–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ –∏ –Ω–∞–∂–º–∏ <b>–ù–∞—á–∞—Ç—å</b></i>)";

        $category_arr = [
            'clothes'       => '#–æ–¥–µ–∂–¥–∞',
            'accessories'   => '#–∞–∫—Å–µ—Å—Å—É–∞—Ä—ã',
            'for_home'      => '#–¥–ª—è_–¥–æ–º–∞',
            'electronics'   => '#—ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞',
            'sport'         => '#—Å–ø–æ—Ä—Ç',
            'furniture'     => '#–º–µ–±–µ–ª—å',
            'books'         => '#–∫–Ω–∏–≥–∏',
            'games'         => '#–∏–≥—Ä—ã',
            'auto'          => '#–∞–≤—Ç–æ_–º–æ—Ç–æ',
            'property'      => '#–Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å',
            'animals'       => '#–∂–∏–≤–æ—Ç–Ω—ã–µ',
            'other'         => '#–ø—Ä–æ—á–µ–µ',
        ];

        $text['category'] = $category_arr[$announcement->category];

        // –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∏—Ç–æ–≥–æ–≤—ã–π —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è
        return implode("\n\n", $text);
    }

    private function sendConfirmMessage(Update $updates, Announcement $announcement): Response
    {
        $buttons = BotApi::inlineKeyboard([
            [array(AnnouncementPublic::$title, AnnouncementPublic::$command, $announcement->id)],
            [array(AnnouncementReject::$title, AnnouncementReject::$command, $announcement->id)],
            [array(MenuCommand::$title, MenuCommand::$command, '')]
        ], 'announcement_id');

        return BotApi::sendMessage([
            'text'          => "–¢–∞–∫ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ." ."\n\n". "*–ü—É–±–ª–∏–∫—É–µ–º?*", 
            'chat_id'       => $updates->getChat()->getId(),
            'parse_mode'    => 'Markdown',
            'reply_markup'  => $buttons
        ]);
    }

    private function sendMessageWithMedia(Update $updates, Announcement $announcement): Response
    {
        $media  = BotApi::setInputMediaPhoto($announcement->photo->pluck('file_id')->take(9), $this->createAdText($announcement), 'HTML');
        
        return BotApi::sendMediaGroup([
            'chat_id'               => $updates->getChat()->getId(),
            'media'                 => $media,
            'disable_notification'  => true,
        ]);
    }

    private function sendMessageWithoutMedia(Update $updates, Announcement $announcement): Response
    {
        return BotApi::sendMessage([
            'chat_id'       => $updates->getChat()->getId(),
            'text'          => $this->createAdText($announcement), 
            'parse_mode'    => 'HTML',
        ]);
    }
}
